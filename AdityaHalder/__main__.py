import asyncio
import importlib
import os
import re

from pyrogram import filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pytgcalls import idle
from rich.console import Console
from rich.table import Table
from youtubesearchpython import VideosSearch

from AdityaHalder.config import LOG_GROUP_ID, STRING_SESSION
from AdityaHalder import client, robot, pytgcalls, ASSID, ASSNAME, BOT_ID, BOT_NAME, OWNER_ID
from AdityaHalder.plugins import ALL_MODULES
from AdityaHalder.utilities.inline import paginate_modules

loop = asyncio.get_event_loop()
console = Console()
HELPABLE = {}


async def initiate_bot():
    with console.status(
        "[magenta] Finalizing Booting...",
    ) as status:
        status.update(
            status="[bold blue]Scanning for Plugins", spinner="earth"
        )
        console.print("Found {} Plugins".format(len(ALL_MODULES)) + "\n")
        status.update(
            status="[bold red]Importing Plugins...",
            spinner="bouncingBall",
            spinner_style="yellow",
        )
        for all_module in ALL_MODULES:
            imported_module = importlib.import_module(
                "Hero.Plugins." + all_module
            )
            if (
                hasattr(imported_module, "__MODULE__")
                and imported_module.__MODULE__
            ):
                imported_module.__MODULE__ = imported_module.__MODULE__
                if (
                    hasattr(imported_module, "__HELP__")
                    and imported_module.__HELP__
                ):
                    HELPABLE[
                        imported_module.__MODULE__.lower()
                    ] = imported_module
            console.print(
                f">> [bold cyan]Successfully imported: [green]{all_module}.py"
            )
        console.print("")
        status.update(
            status="[bold blue]Importation Completed!",
        )
    console.print(
        "[bold green]Genius Userbot Started üå∏‚ú®\n"
    )
    try:
        await app.send_message(
            LOG_GROUP_ID,
            "<b>·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õs  ô·¥è·¥õ  ú·¥Äs s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è üå∏‚ú®</b>",
        )
    except Exception as e:
        print(
            "\n ô·¥è·¥õ  ú·¥Äs “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ ú·¥á  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü. ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥Ä·¥Ö·¥Ö·¥á·¥Ö  è·¥è·¥ú Ä  ô·¥è·¥õ ·¥õ·¥è  è·¥è·¥ú Ä  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö ·¥Äs ·¥Ä·¥Ö·¥ç…™…¥‚ùó"
        )
        console.print(f"\n[red]s·¥õ·¥è·¥ò·¥ò…™…¥…¢  ô·¥è·¥õ")
        return
    a = await app.get_chat_member(LOG_GROUP_ID, BOT_ID)
    if a.status != "administrator":
        print("·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á  ô·¥è·¥õ ·¥Äs ·¥Ä·¥Ö·¥ç…™…¥ …™…¥  ü·¥è…¢…¢·¥á Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü")
        console.print(f"\n[red]s·¥õ·¥è·¥ò·¥ò…™…¥…¢  ô·¥è·¥õ")
        return
    console.print(f"\n‚îå[red]  ô·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥Äs {BOT_NAME}")
    console.print(f"‚îú[green] …™·¥Ö :- {BOT_ID}")
    if STRING_SESSION != "None":
        try:
            await client.send_message(
                LOG_GROUP_ID,
                "<b>·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õs ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥Ñ ü…™·¥á…¥·¥õ  ú·¥Äs s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è üå∏‚ú®</b>",
            )
        except Exception as e:
            print(
                "\n·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ  ú·¥Äs “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ ú·¥á  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü. ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥Ä·¥Ö·¥Ö·¥á·¥Ö  è·¥è·¥ú Ä ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è  è·¥è·¥ú Ä  ü·¥è…¢ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á·¥Ö ·¥Äs ·¥Ä·¥Ö·¥ç…™…¥‚ùó"
            )
            console.print(f"\n[red]s·¥õ·¥è·¥ò·¥ò…™…¥…¢  ô·¥è·¥õ")
            return
        try:
            await client.join_chat("AdityaServer")
            await client.join_chat("AdityaDiscus")
        except:
            pass
        console.print(f"‚îú[red] ·¥Äss…™s·¥õ·¥Ä…¥·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥Äs {ASSNAME}")
        console.print(f"‚îú[green] …™·¥Ö :- {ASSID}")
        console.print(f"‚îî[red]  ú·¥á Ä·¥è ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ  ô·¥è·¥è·¥õ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö...")
        await pytgcalls.start()
    await idle()
    console.print(f"\n[red]s·¥õ·¥è·¥ò·¥ò…™…¥…¢  ô·¥è·¥õ")


home_text_pm = f""" ú·¥á ü ü·¥è ,
·¥ç è …¥·¥Ä·¥ç·¥á …™s {BOT_NAME}.
·¥Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥ç·¥ús…™·¥Ñ+·¥†…™·¥Ö·¥á·¥è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  ô·¥è·¥õ ·¥°…™·¥õ ú s·¥è·¥ç·¥á ·¥ús·¥á“ì·¥ú ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás.

·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú: / """


@robot.on_message(filters.command(["help", "start"]) & filters.private)
async def help_command(_, message):
    text, keyboard = await help_parser(message.from_user.mention)
    await robot.send_message(message.chat.id, text, reply_markup=keyboard)




async def help_parser(name, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    return (
        """ ú·¥á ü ü·¥è {first_name},
…™ ·¥Ä·¥ç ·¥Ä ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ, …™ ·¥Ñ·¥Ä…¥ ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ …™…¥  è·¥è·¥ú Ä ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.

·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú: `/`
""".format(
            first_name=name
        ),
        keyboard,
    )


@robot.on_callback_query(filters.regex("aditya"))
async def aditya(_, CallbackQuery):
    text, keyboard = await help_parser(CallbackQuery.from_user.mention)
    await CallbackQuery.message.edit(text, reply_markup=keyboard)


@robot.on_callback_query(filters.regex(r"help_(.*?)"))
async def help_button(client, query):
    home_match = re.match(r"help_home\((.+?)\)", query.data)
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)
    create_match = re.match(r"help_create", query.data)
    top_text = f""" ú·¥á ü ü·¥è {query.from_user.first_name},

·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s “ì·¥è Ä ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥.

·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú: /
 """
    if mod_match:
        module = mod_match.group(1)
        text = (
            "{} **{}**:\n".format(
                "Here is the help for", HELPABLE[module].__MODULE__
            )
            + HELPABLE[module].__HELP__
        )
        key = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="‚Ü™Ô∏è  ô·¥Ä·¥Ñ·¥ã", callback_data="help_back"
                    ),
                    InlineKeyboardButton(
                        text="üîÑ ·¥Ñ ü·¥ès·¥á", callback_data="close"
                    ),
                ],
            ]
        )

        await query.message.edit(
            text=text,
            reply_markup=key,
            disable_web_page_preview=True,
        )
    elif home_match:
        out = private_panel()
        await app.send_message(
            query.from_user.id,
            text=home_text_pm,
            reply_markup=InlineKeyboardMarkup(out[1]),
        )
        await query.message.delete()
    elif prev_match:
        curr_page = int(prev_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(curr_page - 1, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif next_match:
        next_page = int(next_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(next_page + 1, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif back_match:
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(0, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif create_match:
        text, keyboard = await help_parser(query)
        await query.message.edit(
            text=text,
            reply_markup=keyboard,
            disable_web_page_preview=True,
        )

    return await client.answer_callback_query(query.id)


if __name__ == "__main__":
    loop.run_until_complete(initiate_bot())
